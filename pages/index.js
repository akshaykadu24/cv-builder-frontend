import Head from "next/head";
import Image from "next/image";

import Navbar from "@/components/Navbar";
import { useEffect, useState } from "react";
import cookie from 'cookie';
import VerifyCookies from "@/components/VerifyCookies";
import ClassicTemplate from "@/components/templates/ClassicTemplate";
import ModernTemplate from "@/components/templates/ModernTemplate";
import SidebarTemplate from "@/components/templates/SidebarTemplate";
import handleDownload from "@/components/DownloadPDF";
import { useRouter } from "next/router";
import { Button } from "@mui/material";

export async function getServerSideProps(context) {
  const { req } = context;
  const cookies = cookie.parse(req.headers.cookie || '');
  const token = cookies.ResumeToken;

  let res = await fetch(`${process.env.NEXT_PUBLIC_API_URL}fetchUserResume`, {
    method: "GET",
    headers: {
      "Authorization": token,
    }
  });
  let data = await res.json();

  if (data?.success == 'true') {
    return {
      props: {
        data: data?.data || null,
      },
    }
  } else {
    return {
      redirect: {
        destination: '/login',
        permanent: false,
      },
    };
  }
}

export default function Home(props) {
  const router = useRouter();
  const [resumeData, setResumeData] = useState(props?.data || []);

  // const fontConfig = {
  //   nameSize: 32,
  //   introSize: 16,
  //   contactSize: 14,
  //   headingSize: 20,
  //   itemSize: 14,
  //   minHeight: '950px',
  //   bodyFont: 'Arial, sans-serif',
  // };

  const clickDownload = (component_id, resumeName) => {
    handleDownload(component_id, resumeName);
  }

  const handleEdit = (rid, template) => {
    router.push(`/editor?template=${template}&rid=${rid}`);
  }

  let getResumeData = async (token) => {
    try {
      let res = await fetch(`${process.env.NEXT_PUBLIC_API_URL}fetchUserResume`, {
        method: "GET",
        headers: {
          "Authorization": token,
        }
      });
      let data = await res.json();
      setResumeData(data?.data);
    } catch (error) {
      console.log(error, "error fetching resume data");
    }
  }

  const handleDelete = async (rid) => {
    let cookieToken = document?.cookie?.split('; ').find(c => c.startsWith('ResumeToken='));
    let token = cookieToken?.split('=')[1];
    try {
      let res = await fetch(`${process.env.NEXT_PUBLIC_API_URL}deleteResume/${rid}`, {
        method: "DELETE",
        headers: {
          Authorization: token
        }
      });
      let data = await res.json();
      getResumeData(token);
      alert(data?.msg);
    } catch (error) {
      console.log("delete error", error);
      alert("Something went wrong, data not deleted");
    }
  }

  const handleClickOnNewResume = () => {
    router.push("/layout");
  }

  return (
    <>
      <Head>
        <title>Resume Builder</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <Navbar />
        <div className="pageBorderMargin">

          <h1 style={{ textAlign: 'center', fontSize: '2.5rem', fontWeight: 'bold', marginBottom: '30px', borderBottom: '3px solid #1976d2', paddingBottom: '8px', color: '#333' }}>
            My Resumes
          </h1>
          <div style={{ margin: '40px 0', textAlign: 'center' }}>
            <Button
              variant="contained"
              color="primary"
              onClick={handleClickOnNewResume}
              sx={{
                padding: '10px 24px',
                fontSize: '16px',
                borderRadius: '8px',
                textTransform: 'none',
                boxShadow: '0 3px 5px rgba(0, 0, 0, 0.2)',
                '&:hover': { backgroundColor: '#155fa0' }
              }}
            >
              âž• Create New Resume
            </Button>
          </div>
          <div style={{
            display: 'grid',
            gridTemplateColumns: 'repeat(auto-fit, minmax(360px, 1fr))',
            gap: '30px',
            justifyContent: 'center'

          }}>
            {resumeData?.map((el, index) => (
              <div key={index} style={{
                background: '#fff', borderRadius: 12, padding: 16, boxShadow: '0 4px 10px rgba(0,0,0,0.08)', position: 'relative',
              }}>
                <div
                  id={`resume-to-download${index}`}
                  style={{
                    // transform: 'scale(0.45)',
                    transformOrigin: 'top left',
                    cursor: 'pointer',
                    border: '1px solid #ccc',
                    borderRadius: '8px',
                    padding: '10px',
                    backgroundColor: 'white',
                    marginBottom: 10,
                    width: '100%',
                    overflow: 'hidden'
                  }}
                >
                  {el.template === "classic" ? <ClassicTemplate data={{ ...el, fontConfig: { minHeight: "700px" } }} /> :
                    el.template === "modern" ? <ModernTemplate data={{ ...el, fontConfig: { minHeight: "700px" } }} /> :
                      el.template === "sidebar" ? <SidebarTemplate data={{ ...el, fontConfig: { minHeight: "700px" } }} /> : null}
                </div>

                <div style={{ display: 'flex', flexWrap: 'wrap', gap: '10px', justifyContent: 'center' }}>
                  <Button variant="contained" onClick={() => handleEdit(el?._id, el?.template)} color="primary">Edit</Button>
                  {/* <Button variant="outlined" color="secondary">Preview</Button> */}
                  <Button variant="contained" color="success" onClick={() => clickDownload(`resume-hidden-render${index}`, el?.resumeName)}>Download</Button>
                  <Button variant="contained" color="error" onClick={() => handleDelete(el?._id)}>Delete</Button>
                </div>

                <div id={`resume-hidden-render${index}`} style={{ position: 'absolute', left: '-9999px', top: '-9999px' }}>
                  <div
                    style={{
                      width: '700px',
                      fontSize: "10px",
                      transformOrigin: 'top left',
                      cursor: 'pointer',
                      border: '2px solid #ccc',
                      borderRadius: '8px',
                      padding: '10px',
                      backgroundColor: 'white'
                    }}
                  >
                    {el.template === "classic" ? <ClassicTemplate data={el} /> :
                      el.template === "modern" ? <ModernTemplate data={el} /> :
                        el.template === "sidebar" ? <SidebarTemplate data={el} /> : null}
                  </div>
                </div>
              </div>
            ))}
          </div>


        </div>
      </div>
    </>
  );
}
